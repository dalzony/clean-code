프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야한다.
규칙을 정하고 규칙을 따라야한다.
팀으로 일한다면 팀이 합의해 규칙을 정하고 규칙을 따라야하며,
자동으로 적용하는 도구를 활용하면 좋다.
(책의 코드를 함께 보자)

## 형식을 맞추는 목적

* **코드 형식은 매우 중요하다 **
* 의사소통의 일환
* 지금까지 읽어왔던 것처럼 가독성이 중요하므로, 코드 형식은 중요하다.
* 원래의 코드는 사라질지라도, 개발자의 스타일과 규율은 사라지지 않는다.
* 원할한 소통을 장려하는 코드 형식을 살펴보자!

## 적절한 행 길이를 유지하라 (세로길이)

* 자바에서 파일 크기는 클래스 크기와 밀접.
* junit, fitnesse, time and money의 코드를 살펴보면, 상대적으로 파일 크기가 작다.
- 200줄 미만
* 200줄 미만으로도 커다란 시스템을 구현할 수 있다.
* 큰 파일보다 작은파일이 이해하기 쉽다.

### 신문기사처럼 작성하라

[신문기사]

* 표제를 보고 기사를 읽을지 말지 결정.
* 첫문단은 기사내용을 요약. 커다란 그림만 보여줌
* 읽으며 내려가면, 날짜,이름,발언,주장,기타세부사항이 나옴.

[소스파일]

* 이름은 간단하면서 설명가능하게 짓기
* 이름만 보고도 올바른 모듈 살펴보고 있는지 판단할 정도로 신경써서 짓기
  - 소스파일 첫부분은 고차원 개념과 알고리즘 설명
* 아래로 갈수록 의도를 세부묘사.
  - 마지막에는 가장 저차원의 함수와 세부내역

### 개념은 빈 행으로 분리하라

* 각 행은 수식이나 절, 일련의 행묶음은 완결된 생각하나를 표현
* 생각 사이는 빈 행을 넣어 분리

### 세로 밀집도

* 줄바꿈이 개념을 분리한다면, 세로 밀집도는 연관성을 의미
* 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다.

### 수직거리

연관성이 깊은 두 개념이 멀리 떨어져 있으면, 코드를 읽는 사람이 소스파일과 클래스를 여기저기 뒤지게 된다.

[변수선언]
* 사용하는 위치에 최대한 가까이 선언한다.
* 지역변수는 함수 맨 처음
* 예외 : 긴 함수에서 블록 상단이나 루프직전에 변수를 선언하기도 한다.

[인스턴스 변수]
* 클래스 맨 처음에 선언
* 변수간에 세로로 거리를 두지 않는다.
* 잘 설계한 클래스는 많은 클래스 메서드가 인스턴스변수를 사용하기 떄문.
* 논란
  - c++에서는 모든 인스턴스 변수를 클래스 마지막에 선언 (가위 규칙) 
  - 자바에서는 맨 처음에 선언.
 - 인스턴스변수를 모으는 것이 중요하다. 그래서 어디서 찾을지 알고 있으면 된다. 위 아래는 중요하지 않음.

[종속 함수]
* 한 함수가 다른 함수를 호출한다면, 두 함수는 세로로 가까이 배치한다.
* 가능하면, 호출하는 함수를 호출되는 함수보다 먼저 배치한다. (자연스럽게 읽힘)
- 일관적인 규칙이면, 독자는 방금 호출한 함수가 잠시 후에 정의 되리라는 사실을 예측.

[개념적 유사성]
* 어떤 코드는 서로 끌어당긴다.
* 개념적인 친화도가 높기 때문. 친화도 높을 수록 코드를 가까이 배치.
* 친화도가 높은 요인.
- 한 함수가 다른 함수를 호출해서 생기는 직접적인 종속성
- 변수와 그 변수를 사용하는 함수
- (좋은 예)비슷한 동작을 수행하는 일군의 함수.

### 세로순서

일반적으로 함수 호출 종속성은 아래방향으로 유지,
(파스칼, c,c++에서는 반대)
아까 했던 말과 같음.

## 가로형식맞추기

가로는 얼마나 길어야할 까?

* 짧은 행이 바람직하다.
* 80자 제한은 인위적, 100자나 120자는 나쁘지 않음, 그 이상은 주의부족

### 가로 공백과 밀집도

가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현.

* 할당 연산자를 강조하려고 앞뒤에 공백줌 (왼쪽 오른쪽 요소가 분명히 나뉨)
* 공백을 넣으면 두가지 주요 요소가 확실히 나뉜다.
* 함수 이름과 이어지는 괄호 사이는 공백을 넣지 않음
- 함수와 인수는 서로 밀접하기 때문.
* 공백을 넣으면 한 개념이 아니라 별개로 보인다.
- 함수 호출 시 괄호 안 인수는 공백으로 분리. 인수는 별개!
* 연산자 우선순위 강조하기 위해서 사용하기도 한다.

### 가로정렬

가로정렬은 맞추지 말자, 왜냐하면 변수 유형을 무시하고 이름만 읽게 되기 때문이다.

### 들여쓰기

### 가짜 범위

## 팀규칙
## 밥아저씨의 형식 규칙
